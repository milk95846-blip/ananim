import logging
import datetime
import asyncio
import uuid
import os
import psycopg2
from psycopg2.extras import DictCursor

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from telegram.constants import ParseMode, ChatAction
from telegram.error import Forbidden, BadRequest
from functools import wraps

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –•–û–°–¢–ò–ù–ì–ê ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "8284261615:AAEFCwzGn1c-WuR1otmpwO39zc5W0npEo_4")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "5364433992")
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    raise ValueError("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL. –î–æ–±–∞–≤—å—Ç–µ –∞–¥–¥–æ–Ω PostgreSQL –Ω–∞ Scalingo.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ---
FORBIDDEN_CHARS = {'–∏', '—â', '—ä', '–ò', '–©', '–™'}
WARNING_LIMIT = 3
AMNESTY_CODE = "–ê–î–†–ê–î–ñ–≠–ù–ù–ï"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandlers
(AWAITING_BROADCAST_MESSAGE, AWAITING_INFO_ID, AWAITING_SENDTO_IDS, AWAITING_SENDTO_MESSAGE, AWAITING_REPORT_SCREENSHOTS) = range(5)
CHAT_STATUS_IDLE, CHAT_STATUS_WAITING, CHAT_STATUS_CHATTING = "idle", "waiting", "chatting"

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
ADMIN_MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup([["üìä –°—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞", "üë• –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫—ñ"],["üì£ –†–∞—Å—Å—ã–ª–∫—ñ", "üí¨ –í—ã–ø–∞–¥–∫–æ–≤—ã —á–∞—Ç"],["üÜò SOS-—á–∞—Ç—ã", "‚öôÔ∏è –°—ã—Å—Ç—ç–º–∞"]], resize_keyboard=True)
ADMIN_USERS_MENU_KEYBOARD = ReplyKeyboardMarkup([["‚ÑπÔ∏è –Ü–Ω—Ñ–æ –ø—Ä–∞ —é–∑—ç—Ä–∞", "üìã –°—å–ø—ñ—Å —É—Å—ñ—Ö"],["üîô –ì–∞–ª–æ—û–Ω–∞–µ –º—ç–Ω—é"]], resize_keyboard=True)
ADMIN_BROADCAST_MENU_KEYBOARD = ReplyKeyboardMarkup([["üì£ –£—Å—ñ–º", "üéØ –í—ã–±—Ä–∞–Ω—ã–º"],["üîô –ì–∞–ª–æ—û–Ω–∞–µ –º—ç–Ω—é"]], resize_keyboard=True)
ADMIN_SYSTEM_MENU_KEYBOARD = ReplyKeyboardMarkup([["üóëÔ∏è –ê—á—ã—Å—å—Ü—ñ—Ü—å –≥—ñ—Å—Ç–æ—Ä—ã—é —á–∞—Ç–∞—û"],["üîô –ì–∞–ª–æ—û–Ω–∞–µ –º—ç–Ω—é"]], resize_keyboard=True)


# --- –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• POSTGRESQL ---

def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

def initialize_databases():
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY, first_name TEXT, username TEXT,
                    start_time TIMESTAMPTZ DEFAULT NOW(), last_active_time TIMESTAMPTZ DEFAULT NOW(),
                    chat_status TEXT DEFAULT 'idle', current_chat_partner BIGINT, current_chat_session TEXT,
                    is_banned BOOLEAN DEFAULT FALSE, warnings INTEGER DEFAULT 0, has_blocked_bot BOOLEAN DEFAULT FALSE
                )""")
            cur.execute("""
                CREATE TABLE IF NOT EXISTS chat_logs (
                    log_id SERIAL PRIMARY KEY, session_id TEXT NOT NULL, timestamp TIMESTAMPTZ DEFAULT NOW(),
                    sender_id BIGINT NOT NULL, partner_id BIGINT NOT NULL, message_id BIGINT NOT NULL,
                    message_type TEXT NOT NULL, message_text TEXT, file_id TEXT
                )""")
            cur.execute("""
                CREATE TABLE IF NOT EXISTS message_links (
                    source_chat_id BIGINT NOT NULL, source_message_id BIGINT NOT NULL, dest_chat_id BIGINT NOT NULL,
                    dest_message_id BIGINT NOT NULL, timestamp TIMESTAMPTZ DEFAULT NOW(),
                    PRIMARY KEY (source_chat_id, source_message_id)
                )""")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_dest_message_psql ON message_links (dest_chat_id, dest_message_id)")
            cur.execute("CREATE INDEX IF NOT EXISTS idx_session_id_psql ON chat_logs (session_id)")
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def get_user(user_id):
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
            user = cur.fetchone()
            return dict(user) if user else None

def get_all_users():
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute("SELECT user_id, first_name, username, is_banned, has_blocked_bot, warnings FROM users")
            return {str(row['user_id']): dict(row) for row in cur.fetchall()}

def update_user(user_data):
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO users (user_id, first_name, username, start_time, last_active_time, chat_status, current_chat_partner, current_chat_session, is_banned, warnings, has_blocked_bot)
                VALUES (%(user_id)s, %(first_name)s, %(username)s, %(start_time)s, %(last_active_time)s, %(chat_status)s, %(current_chat_partner)s, %(current_chat_session)s, %(is_banned)s, %(warnings)s, %(has_blocked_bot)s)
                ON CONFLICT (user_id) DO UPDATE SET
                    first_name = EXCLUDED.first_name, username = EXCLUDED.username, last_active_time = EXCLUDED.last_active_time,
                    chat_status = EXCLUDED.chat_status, current_chat_partner = EXCLUDED.current_chat_partner,
                    current_chat_session = EXCLUDED.current_chat_session, is_banned = EXCLUDED.is_banned,
                    warnings = EXCLUDED.warnings, has_blocked_bot = EXCLUDED.has_blocked_bot;
            """, user_data)

def reset_all_user_statuses_on_startup():
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("UPDATE users SET chat_status = %s, current_chat_partner = NULL, current_chat_session = NULL WHERE chat_status IN (%s, %s)",
                            (CHAT_STATUS_IDLE, CHAT_STATUS_CHATTING, CHAT_STATUS_WAITING))
        logger.info("–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

def log_chat_message(sender_id: str, partner_id: str, message: Update.message, session_id: str):
    data = {'type': 'unknown', 'text': None, 'file_id': None}
    if message.text: data.update({'type': 'text', 'text': message.text})
    elif message.sticker: data.update({'type': 'sticker', 'file_id': message.sticker.file_id})
    elif message.photo: data.update({'type': 'photo', 'file_id': message.photo[-1].file_id, 'text': message.caption})
    elif message.video: data.update({'type': 'video', 'file_id': message.video.file_id, 'text': message.caption})
    elif message.voice: data.update({'type': 'voice', 'file_id': message.voice.file_id, 'text': message.caption})
    elif message.audio: data.update({'type': 'audio', 'file_id': message.audio.file_id, 'text': message.caption})
    elif message.document: data.update({'type': 'document', 'file_id': message.document.file_id, 'text': message.caption})
    elif message.video_note: data.update({'type': 'video_note', 'file_id': message.video_note.file_id})
    message_id = message.message_id if hasattr(message, 'message_id') else 0
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO chat_logs (session_id, sender_id, partner_id, message_id, message_type, message_text, file_id) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (session_id, int(sender_id), int(partner_id), message_id, data['type'], data['text'], data['file_id']))

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def check_if_banned(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_telegram = update.effective_user
        if not user_telegram:
            if hasattr(update, 'callback_query'): user_telegram = update.callback_query.from_user
        if not user_telegram: return

        user_id = user_telegram.id
        user_data = get_user(user_id)

        is_new_user = not user_data
        if is_new_user:
            user_data = {
                "user_id": user_id, "first_name": user_telegram.first_name, "username": user_telegram.username or "–Ω—è–º–∞",
                "start_time": datetime.datetime.now(datetime.timezone.utc), "last_active_time": datetime.datetime.now(datetime.timezone.utc),
                "chat_status": CHAT_STATUS_IDLE, "current_chat_partner": None, "current_chat_session": None,
                "is_banned": False, "warnings": 0, "has_blocked_bot": False
            }
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({user_telegram.first_name})")
        
        context.user_data['is_new_user'] = is_new_user
        
        if user_data.get('is_banned', False):
            if update.message and update.message.text == AMNESTY_CODE:
                await handle_amnesty_code(update, context)
            return

        user_data['last_active_time'] = datetime.datetime.now(datetime.timezone.utc)
        if user_data.get('has_blocked_bot'):
             user_data['has_blocked_bot'] = False
        
        if user_data.get("username") != (user_telegram.username or "–Ω—è–º–∞") or user_data.get("first_name") != user_telegram.first_name:
            user_data["username"] = user_telegram.username or "–Ω—è–º–∞"
            user_data["first_name"] = user_telegram.first_name

        update_user(user_data)
        return await func(update, context, *args, **kwargs)
    return wrapper

def is_admin(user_id: str) -> bool: return user_id == ADMIN_CHAT_ID

def find_user_id_by_identifier(identifier: str) -> int | None:
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            try:
                if identifier.isdigit():
                    cur.execute("SELECT user_id FROM users WHERE user_id = %s", (int(identifier),))
                elif identifier.startswith('@'):
                    cur.execute("SELECT user_id FROM users WHERE username = %s", (identifier[1:],))
                else: return None
                result = cur.fetchone()
                return result[0] if result else None
            except Exception:
                return None

def get_user_display_name(user_id: str, users_db: dict) -> str:
    user_info = users_db.get(str(user_id), {})
    return user_info.get("first_name") or f"User {user_id}"

def mark_user_as_bot_blocker(user_id: str):
    user_data = get_user(int(user_id))
    if user_data and not user_data.get('has_blocked_bot'):
        user_data['has_blocked_bot'] = True
        update_user(user_data)
        logger.info(f"User {user_id} has likely blocked the bot. Marked.")

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

@check_if_banned
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    is_new_user = context.user_data.get('is_new_user', False)
    if is_admin(str(user.id)):
        welcome_text = "–í—ñ—Ç–∞—é, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä! –í–∞—à–∞—è –∞–¥–º—ã—Å–ª–æ–≤–∞—è –∫–ª—è–≤—ñ—è—Ç—É—Ä–∞ –∞–∫—Ç—ã–≤–∞–≤–∞–Ω–∞—è."
        reply_markup = ADMIN_MAIN_MENU_KEYBOARD
    else:
        if is_new_user:
            welcome_text = (f"–ü—Ä—ã–≤—ñ—Ç–∞–Ω—å–Ω–µ, {user.first_name}! üëã\n\n–ì—ç—Ç–∞ –∞–Ω–∞–Ω—ñ–º–Ω—ã —á–∞—Ç. "
                            f"–ö–∞–± –ø–∞—á–∞—Ü—å, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ –∫–∞–º–∞–Ω–¥—É /search.\n"
                            f"–¢–∞–∫—Å–∞–º–∞ —Ä–∞—ñ–º –∞–∑–Ω–∞—ë–º—ñ—Ü—Ü–∞ –∑ /rules.\n\n"
                            f"–ö–∞–± —É–±–∞—á—ã—Ü—å —É—Å–µ –¥–∞—Å—Ç—É–ø–Ω—ã—è –¥–∑–µ—è–Ω—å–Ω—ñ, –Ω–∞—Ü—ñ—Å—å–Ω—ñ—Ü–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚ò∞' –∞–±–æ '/' –ø–æ–±–∞—á –∑ –ø–æ–ª–µ–º —É–≤–æ–¥—É —Ç—ç–∫—Å—Ç—É.")
        else:
            welcome_text = f"–ó—å –≤—è—Ä—Ç–∞–Ω–Ω–µ–º, {user.first_name}! –ö–∞—Ä—ã—Å—Ç–∞–π—Ü–µ—Å—è –º—ç–Ω—é –∫–∞–º–∞–Ω–¥–∞—û –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ã—ñ."
        reply_markup = ReplyKeyboardRemove()
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

@check_if_banned
async def rules_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    rules_text = ("**–î–∞ —û–≤–∞–≥—ñ —û–¥–∑–µ–ª—å–Ω—ñ–∫–∞—û –≥—ç—Ç–∞–≥–∞ —á–∞—Ç—É!**\n\n"
                  "–°—è–±—Ä—ã, –≤–∞—Ä—Ç–∞ —Ä–∞–∑—É–º–µ—Ü—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Ä—ç—á: –±—è—Å—å–ø–µ–∫–∞ –∞–Ω–∞–Ω—ñ–º–Ω–∞–≥–∞ —á–∞—Ç—É –∑–≤—ã—á–∞–π–Ω–∞ —û–±–∞—á–∞–Ω–∞—è —û –∞–±–∞—Ä–æ–Ω–µ –≤–∞—à–∞–π –∞—Å–æ–±—ã –∞–¥ —ñ–Ω—à—ã—Ö —É–¥–∑–µ–ª—å–Ω—ñ–∫–∞—û. "
                  "–ê–¥–Ω–∞–∫ –∑ –ø—É–Ω–∫—Ç—É –≥–ª–µ–¥–∂–∞–Ω–Ω—è –∫–∞–Ω—Ñ—ñ–¥—ç–Ω—Ü—ã—è–ª—å–Ω–∞—Å—å—Ü—ñ –ø–µ—Ä–∞–ø—ñ—Å–∫–∞ –Ω—è –º–æ–∂–∞ –±—ã—Ü—å –±–æ–ª—å—à –±—è—Å—å–ø–µ—á–Ω–∞–π, —á—ã–º –∞—Å–∞–±—ñ—Å—Ç—ã —á–∞—Ç —É –¢—ç–ª–µ–≥—Ä–∞–º–µ.\n\n"
                  "*–ö–∞–ª—ñ –≤–∞–º –Ω–µ–∞–±—Ö–æ–¥–Ω–∞ –∞–±–º—è—Ä–∫–æ—û–≤–∞—Ü—å —Å–∞–∫—Ä—ç—Ç–Ω—ã—è —Ç—ç–º—ã, —è–∫—ñ—è –ø–∞—Ç—Ä–∞–±—É—é—Ü—å –º–∞–∫—Å—ã–º–∞–ª—å–Ω–∞–π –∞–±–∞—Ä–æ–Ω—ã, –Ω–∞—à–∞—è —Ä—ç–∫–∞–º–µ–Ω–¥–∞—Ü—ã—è –ø—Ä–æ—Å—Ç–∞—è —ñ –Ω–∞–¥–∑–µ–π–Ω–∞—è:*\n"
                  "*–í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ —Å—ç–∫—Ä—ç—Ç–Ω—ã—è —á–∞—Ç—ã —û –¢—ç–ª–µ–≥—Ä–∞–º–µ —Ü—ñ —ñ–Ω—à—ã—è —Å—Ä–æ–¥–∫—ñ —Å—É–≤—è–∑—ñ.*\n\n"
                  "–ë–µ—Ä–∞–∂—ã—Ü–µ —Å—è–±–µ —ñ —Å–≤–∞—é –ø—Ä—ã–≤–∞—Ç–Ω–∞—Å—å—Ü—å.\n\n"
                  "**–ü—Ä–∞–≤—ñ–ª—ã –∞–Ω–∞–Ω—ñ–º–Ω–∞–≥–∞ —á–∞—Ç—É:**\n\n"
                  "1.  –ú–æ–≤–∞ —á–∞—Ç—É ‚Äî **–±–µ–ª–∞—Ä—É—Å–∫–∞—è**.\n"
                  "2.  –®–∞–Ω—É–π—Ü–µ —Å—É—Ä–∞–∑–º–æ—û—Ü–∞—û.\n"
                  "3.  –ó–∞–±–∞—Ä–æ–Ω–µ–Ω—ã –Ω–µ–ø—Ä—ã—Å—Ç–æ–π–Ω—ã –∫–∞–Ω—Ç—ç–Ω—Ç.\n"
                  "4.  –ë–µ–∑ —Å–ø–∞–º—É.\n"
                  "5.  –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ü–µ –∞—Å–∞–±—ñ—Å—Ç—É—é —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é.")
    await update.message.reply_text(rules_text, parse_mode=ParseMode.MARKDOWN)

async def connect_users(user1_id_str: str, user2_id_str: str, context: ContextTypes.DEFAULT_TYPE):
    user1_data = get_user(int(user1_id_str))
    user2_data = get_user(int(user2_id_str))
    session_id = f"session_{uuid.uuid4().hex[:12]}"
    user1_data.update({'chat_status': CHAT_STATUS_CHATTING, 'current_chat_partner': int(user2_id_str), 'current_chat_session': session_id})
    user2_data.update({'chat_status': CHAT_STATUS_CHATTING, 'current_chat_partner': int(user1_id_str), 'current_chat_session': session_id})
    update_user(user1_data)
    update_user(user2_data)
    connect_message = "‚úÖ –°—É—Ä–∞–∑–º–æ—û—Ü–∞ –∑–Ω–æ–π–¥–∑–µ–Ω—ã! –ú–æ–∂–∞—Ü–µ –ø–∞—á—ã–Ω–∞—Ü—å –∑–Ω–æ—Å—ñ–Ω—ã."
    for uid in [user1_id_str, user2_id_str]:
        try:
            await context.bot.send_message(uid, connect_message)
        except Exception as e: logger.error(f"–ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –∞–ø–∞–≤—è—Å—å—Ü—ñ—Ü—å {uid}: {e}")

@check_if_banned
async def start_chat_logic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id_str = str(update.effective_user.id)
    user_data = get_user(int(user_id_str))
    if user_data.get('chat_status') in [CHAT_STATUS_CHATTING, CHAT_STATUS_WAITING]:
        await update.message.reply_text("–í—ã —û–∂–æ —û –ø—Ä–∞—Ü—ç—Å–µ. –ö–∞–± —Å–ø—ã–Ω—ñ—Ü—å, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ /stop.")
        return
    lock = context.bot_data['chat_search_lock']
    async with lock:
        user_data = get_user(int(user_id_str))
        user_data['chat_status'] = CHAT_STATUS_WAITING
        update_user(user_data)
        waiting_queue = context.bot_data.setdefault('waiting_queue', [])
        if user_id_str in waiting_queue:
            waiting_queue.remove(user_id_str)
        if len(waiting_queue) > 0:
            partner_id = waiting_queue.pop(0)
            asyncio.create_task(connect_users(partner_id, user_id_str, context))
            return
        if user_id_str not in waiting_queue:
            waiting_queue.append(user_id_str)
    await update.message.reply_text("üîé –®—É–∫–∞–µ–º —Å—É—Ä–∞–∑–º–æ—û—Ü—É...")

@check_if_banned
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = get_user(update.effective_user.id)
    if user_data.get('chat_status') == CHAT_STATUS_CHATTING:
        await stop_command(update, context, is_part_of_search=True)
        await asyncio.sleep(0.5)
        await start_chat_logic(update, context)
    else:
        await start_chat_logic(update, context)

async def process_post_chat_warnings(user_id_str: str, context: ContextTypes.DEFAULT_TYPE):
    chat_flags = context.bot_data.setdefault('chat_flags', {})
    if chat_flags.get(user_id_str):
        user_data = get_user(int(user_id_str))
        if user_data:
            current_warnings = user_data.get('warnings', 0) + 1
            user_data['warnings'] = current_warnings
            if current_warnings >= WARNING_LIMIT:
                user_data['is_banned'] = True
                ban_message = (f"‚ùóÔ∏è–í—ã –∞—Ç—Ä—ã–º–∞–ª—ñ {current_warnings}/{WARNING_LIMIT} –ø–∞–ø—è—Ä—ç–¥–∂–∞–Ω—å–Ω—è—û –∑–∞ –≤—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω—å–Ω–µ –ª—ñ—Ç–∞—Ä–∞—û –Ω–µ–±–µ–ª–∞—Ä—É—Å–∫–∞–≥–∞ –∞–ª—å—Ñ–∞–±—ç—Ç—É. –í–∞—à –¥–æ—Å—Ç—É–ø –¥–∞ —á–∞—Ç–∞ –∑–∞–±–ª—è–∫–∞–≤–∞–Ω—ã.")
                await context.bot.send_message(user_id_str, ban_message, parse_mode=ParseMode.MARKDOWN)
            else:
                await context.bot.send_message(user_id_str, f"‚ö†Ô∏è –ü–∞–ø—è—Ä—ç–¥–∂–∞–Ω—å–Ω–µ ({current_warnings}/{WARNING_LIMIT}): –∫–∞–ª—ñ –ª–∞—Å–∫–∞, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ —Ç–æ–ª—å–∫—ñ –ª—ñ—Ç–∞—Ä—ã –±–µ–ª–∞—Ä—É—Å–∫–∞–≥–∞ –∞–ª—å—Ñ–∞–±—ç—Ç—É ('—ñ' –∑–∞–º–µ—Å—Ç '–∏', '—à—á' –∑–∞–º–µ—Å—Ç '—â' —ñ –≥.–¥.).")
            update_user(user_data)
        if user_id_str in chat_flags: del chat_flags[user_id_str]

async def end_chat_session(user_id1_str: str, user_id2_str: str | None, context: ContextTypes.DEFAULT_TYPE, initiator_id_str: str, is_part_of_search: bool = False) -> None:
    await process_post_chat_warnings(user_id1_str, context)
    if user_id2_str:
        await process_post_chat_warnings(user_id2_str, context)
    
    for uid_str in [user_id1_str, user_id2_str]:
        if uid_str:
            user_data = get_user(int(uid_str))
            if user_data:
                user_data.update({'chat_status': CHAT_STATUS_IDLE, 'current_chat_partner': None, 'current_chat_session': None})
                update_user(user_data)
    
    if is_part_of_search:
        partner_id_str = user_id2_str if initiator_id_str == user_id1_str else user_id1_str
        if partner_id_str:
             try:
                await context.bot.send_message(partner_id_str, "–°—É—Ä–∞–∑–º–æ—û—Ü–∞ –ø–∞–∫—ñ–Ω—É—û —á–∞—Ç, –∫–∞–± –∑–Ω–∞–π—Å—å—Ü—ñ –Ω–æ–≤–∞–≥–∞.\n\n–ö–∞–± –ø–∞—á–∞—Ü—å –Ω–æ–≤—ã –ø–æ—à—É–∫, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ /search.")
             except Forbidden: mark_user_as_bot_blocker(partner_id_str)
             except Exception as e: logger.error(f"–ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –∞–¥–ø—Ä–∞–≤—ñ—Ü—å –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ –ø—Ä–∞ –∑–∞–≤—è—Ä—à—ç–Ω—å–Ω–µ —á–∞—Ç–∞ –¥–ª—è {partner_id_str}: {e}")
        return

    for uid_str, partner_id_str in [(user_id1_str, user_id2_str), (user_id2_str, user_id1_str)]:
        if uid_str:
            try:
                message_text = "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–∞–Ω—ã." if initiator_id_str == uid_str else "–°—É—Ä–∞–∑–º–æ—û—Ü–∞ –∑–∞–≤—è—Ä—à—ã—û —á–∞—Ç."
                reply_markup = ADMIN_MAIN_MENU_KEYBOARD if is_admin(uid_str) else ReplyKeyboardRemove()
                final_message_text = f"{message_text}\n\n–ö–∞–± –ø–∞—á–∞—Ü—å –Ω–æ–≤—ã –ø–æ—à—É–∫, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ /search."
                final_reply_markup = None
                if partner_id_str and not is_admin(partner_id_str):
                    final_reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–∞—Å–∫–∞—Ä–¥–∑—ñ—Ü—Ü–∞ –Ω–∞ —Å—É—Ä–∞–∑–º–æ—û—Ü—É", callback_data=f"report_{partner_id_str}")]])
                await context.bot.send_message(uid_str, final_message_text, reply_markup=reply_markup)
                if final_reply_markup:
                    await context.bot.send_message(uid_str, "–ö–∞–ª—ñ —Å—É—Ä–∞–∑–º–æ—û—Ü–∞ –ø–∞—Ä—É—à–∞—û –ø—Ä–∞–≤—ñ–ª—ã, –≤—ã –º–æ–∂–∞—Ü–µ –ø–∞—Å–∫–∞—Ä–¥–∑—ñ—Ü—Ü–∞.", reply_markup=final_reply_markup)
            except Forbidden: mark_user_as_bot_blocker(uid_str)
            except Exception as e: logger.error(f"–ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –∞–¥–ø—Ä–∞–≤—ñ—Ü—å –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ –ø—Ä–∞ –∑–∞–≤—è—Ä—à—ç–Ω—å–Ω–µ —á–∞—Ç–∞ –¥–ª—è {uid_str}: {e}")

@check_if_banned
async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE, is_part_of_search: bool = False) -> None:
    user_id_str = str(update.effective_user.id)
    user_data = get_user(int(user_id_str))
    status = user_data.get('chat_status')
    reply_markup = ADMIN_MAIN_MENU_KEYBOARD if is_admin(user_id_str) else ReplyKeyboardRemove()

    if status == CHAT_STATUS_WAITING:
        if user_id_str in context.bot_data.get('waiting_queue', []):
            context.bot_data['waiting_queue'].remove(user_id_str)
        user_data['chat_status'] = CHAT_STATUS_IDLE
        update_user(user_data)
        if not is_part_of_search: await update.message.reply_text("–ü–æ—à—É–∫ —Å–∫–∞—Å–∞–≤–∞–Ω—ã.", reply_markup=reply_markup)
    elif status == CHAT_STATUS_CHATTING:
        partner_id = user_data.get('current_chat_partner')
        partner_id_str = str(partner_id) if partner_id else None
        await end_chat_session(user_id_str, partner_id_str, context, initiator_id_str=user_id_str, is_part_of_search=is_part_of_search)
        if not partner_id and not is_part_of_search:
             await update.message.reply_text("–í—ã –≤—ã–π—à–ª—ñ –∑ —á–∞—Ç–∞.", reply_markup=reply_markup)
    else:
        if not is_part_of_search: await update.message.reply_text("–í—ã –Ω–µ —û —á–∞—Ü–µ —ñ –Ω–µ —û –ø–æ—à—É–∫—É.", reply_markup=reply_markup)

@check_if_banned
async def chat_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message: return
    user_id_str = str(update.effective_user.id)
    user_data = get_user(int(user_id_str))
    partner_id = user_data.get('current_chat_partner')
    session_id = user_data.get('current_chat_session')
    
    if not (partner_id and session_id): return
    partner_id_str = str(partner_id)

    log_chat_message(user_id_str, partner_id_str, update.message, session_id)
    if update.message.text and any(char in FORBIDDEN_CHARS for char in update.message.text):
        context.bot_data.setdefault('chat_flags', {})[user_id_str] = True
    
    try:
        sent_message = await forward_message_with_reply(context, user_id_str, partner_id_str, update.message)
        if sent_message:
            with get_db_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute("INSERT INTO message_links (source_chat_id, source_message_id, dest_chat_id, dest_message_id) VALUES (%s, %s, %s, %s) ON CONFLICT DO NOTHING",
                                (int(user_id_str), update.message.message_id, int(partner_id_str), sent_message.message_id))
                    cur.execute("INSERT INTO message_links (source_chat_id, source_message_id, dest_chat_id, dest_message_id) VALUES (%s, %s, %s, %s) ON CONFLICT DO NOTHING",
                                (int(partner_id_str), sent_message.message_id, int(user_id_str), update.message.message_id))
    except Forbidden:
        mark_user_as_bot_blocker(partner_id_str)
        reply_markup_after_error = ADMIN_MAIN_MENU_KEYBOARD if is_admin(user_id_str) else ReplyKeyboardRemove()
        await end_chat_session(user_id_str, partner_id_str, context, initiator_id_str=user_id_str)
        await update.message.reply_text("‚ùå –ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –¥–∞—Å—Ç–∞–≤—ñ—Ü—å –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ. –°—É—Ä–∞–∑–º–æ—û—Ü–∞, –º–∞–≥—á—ã–º–∞, –∑–∞–±–ª—è–∫–∞–≤–∞—û –±–æ—Ç–∞. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–∞–Ω—ã.", reply_markup=reply_markup_after_error)
    except Exception as e: logger.error(f"–ü–∞–º—ã–ª–∫–∞ –ø–µ—Ä–∞—Å—ã–ª–∫—ñ: {e}")

async def forward_message_with_reply(context: ContextTypes.DEFAULT_TYPE, from_id_str: str, to_id_str: str, message: Update.message):
    reply_to_dest_id = None
    if message.reply_to_message:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT dest_message_id FROM message_links WHERE source_chat_id = %s AND source_message_id = %s",
                                      (int(from_id_str), message.reply_to_message.message_id))
                result = cur.fetchone()
                if result: reply_to_dest_id = result[0]
    kwargs = {'chat_id': to_id_str, 'reply_to_message_id': reply_to_dest_id}
    if message.text: return await context.bot.send_message(text=message.text, entities=message.entities, **kwargs)
    elif message.photo: return await context.bot.send_photo(photo=message.photo[-1].file_id, caption=message.caption, caption_entities=message.caption_entities, **kwargs)
    elif message.sticker: return await context.bot.send_sticker(sticker=message.sticker.file_id, **kwargs)
    elif message.voice: return await context.bot.send_voice(voice=message.voice.file_id, caption=message.caption, caption_entities=message.caption_entities, **kwargs)
    elif message.video: return await context.bot.send_video(video=message.video.file_id, caption=message.caption, caption_entities=message.caption_entities, **kwargs)
    elif message.video_note: return await context.bot.send_video_note(video_note=message.video_note.file_id, **kwargs)
    elif message.document: return await context.bot.send_document(document=message.document.file_id, caption=message.caption, caption_entities=message.caption_entities, **kwargs)
    elif message.audio: return await context.bot.send_audio(audio=message.audio.file_id, caption=message.caption, caption_entities=message.caption_entities, **kwargs)
    else: return await message.copy(chat_id=to_id_str, reply_to_message_id=reply_to_dest_id)

@check_if_banned
async def edited_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    edited_message = update.edited_message
    if not edited_message: return

    user_id = edited_message.chat_id
    user_data = get_user(user_id)
    if not user_data or not (partner_id := user_data.get('current_chat_partner')): return

    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT dest_message_id FROM message_links WHERE source_chat_id = %s AND source_message_id = %s",
                          (user_id, edited_message.message_id))
            result = cur.fetchone()
            if result:
                dest_message_id = result[0]
                try:
                    if edited_message.text:
                        await context.bot.edit_message_text(chat_id=partner_id, message_id=dest_message_id, text=edited_message.text, entities=edited_message.entities)
                        cur.execute("UPDATE chat_logs SET message_text = %s WHERE sender_id = %s AND message_id = %s",
                                     (edited_message.text, user_id, edited_message.message_id))
                    elif edited_message.caption is not None:
                        await context.bot.edit_message_caption(chat_id=partner_id, message_id=dest_message_id, caption=edited_message.caption, caption_entities=edited_message.caption_entities)
                        cur.execute("UPDATE chat_logs SET message_text = %s WHERE sender_id = %s AND message_id = %s",
                                     (edited_message.caption, user_id, edited_message.message_id))
                except BadRequest as e:
                    if "message is not modified" not in str(e).lower(): logger.error(f"–ü–∞–º—ã–ª–∫–∞ —Ä—ç–¥–∞–≥–∞–≤–∞–Ω—å–Ω—è (BadRequest): {e}")
                except Exception as e: logger.error(f"–ù–µ–≤—è–¥–æ–º–∞—è –ø–∞–º—ã–ª–∫–∞ —Ä—ç–¥–∞–≥–∞–≤–∞–Ω—å–Ω—è: {e}")

# --- –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–í–ê–ù–¨–ù–ï ---

@check_if_banned
async def admin_enter_random_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã –ø–µ—Ä–∞–π—à–ª—ñ —û —Ä—ç–∂—ã–º –≤—ã–ø–∞–¥–∫–æ–≤–∞–≥–∞ —á–∞—Ç–∞.\n\n"
                                    "–ö–∞—Ä—ã—Å—Ç–∞–π—Ü–µ—Å—è –∫–∞–º–∞–Ω–¥–∞–º—ñ /search —ñ /stop –¥–ª—è –∫—ñ—Ä–∞–≤–∞–Ω—å–Ω—è.\n\n"
                                    "–ö–∞–± –≤—è—Ä–Ω—É—Ü—Ü–∞ —û –º—ç–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞, –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ /stop, –∞ –∑–∞—Ç—ã–º /start.",
                                    reply_markup=ReplyKeyboardRemove())

async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–∞–ª–æ—û–Ω–∞–µ –º—ç–Ω—é:", reply_markup=ADMIN_MAIN_MENU_KEYBOARD)
async def admin_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö—ñ—Ä–∞–≤–∞–Ω—å–Ω–µ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞–º—ñ:", reply_markup=ADMIN_USERS_MENU_KEYBOARD)
async def admin_broadcast_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫—ñ:", reply_markup=ADMIN_BROADCAST_MENU_KEYBOARD)
async def admin_system_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°—ã—Å—Ç—ç–º–Ω—ã—è –Ω–∞–ª–∞–¥–∫—ñ:", reply_markup=ADMIN_SYSTEM_MENU_KEYBOARD)

@check_if_banned
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = ("<b>–î–∞–ø–∞–º–æ–≥–∞ –ø–∞ –º—ç–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞:</b>\n\n"
                 "<b>üìä –°—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞</b> - –ø–∞–∫–∞–∑–≤–∞–µ –ø–∞—à—ã—Ä–∞–Ω—É—é —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—É –ø–∞ –±–æ—Ç—É.\n"
                 "<b>üë• –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫—ñ</b> - –º—ç–Ω—é –¥–ª—è –ø—Ä–∞—Ü—ã –∑ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞–º—ñ (–ø—Ä–∞–≥–ª—è–¥ —ñ–Ω—Ñ–æ, —Å—å–ø—ñ—Å—ã, –±–∞–Ω/—Ä–∞–∑–±–∞–Ω).\n"
                 "<b>üì£ –†–∞—Å—Å—ã–ª–∫—ñ</b> - –∞–¥–ø—Ä–∞—û–∫–∞ –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω—è—û —É—Å—ñ–º —Ü—ñ –≤—ã–±—Ä–∞–Ω—ã–º –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞–º.\n"
                 "<b>üÜò SOS-—á–∞—Ç—ã</b> - –ø–∞—á–∞—Ü—å —á–∞—Ç –∑ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞–º –∑ —á–∞—Ä–≥—ñ SOS.\n"
                 "<b>üí¨ –í—ã–ø–∞–¥–∫–æ–≤—ã —á–∞—Ç</b> - —É–≤–∞–π—Å—å—Ü—ñ —û –∞–Ω–∞–Ω—ñ–º–Ω—ã —á–∞—Ç —è–∫ –∑–≤—ã—á–∞–π–Ω—ã –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫.\n"
                 "<b>‚öôÔ∏è –°—ã—Å—Ç—ç–º–∞</b> - –¥–∞–¥–∞—Ç–∫–æ–≤—ã—è –Ω–∞–ª–∞–¥–∫—ñ, –Ω–∞–ø—Ä—ã–∫–ª–∞–¥, –∞—á—ã—Å—Ç–∫–∞ –±–∞–∑—ã –∑—å–≤–µ—Å—Ç–∞–∫.")
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

@check_if_banned
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=DictCursor) as cur:
                cur.execute("SELECT COUNT(DISTINCT session_id) as total_sessions, COUNT(log_id) as total_messages FROM chat_logs")
                chat_stats = cur.fetchone()
                cur.execute("""
                    SELECT 
                        COUNT(user_id) as total_users,
                        COUNT(CASE WHEN last_active_time > NOW() - INTERVAL '24 hours' THEN 1 END) as active_today,
                        COUNT(CASE WHEN is_banned = TRUE THEN 1 END) as banned,
                        COUNT(CASE WHEN has_blocked_bot = TRUE THEN 1 END) as blocked_bot,
                        COUNT(CASE WHEN chat_status = %s THEN 1 END) as chatting
                    FROM users
                """, (CHAT_STATUS_CHATTING,))
                user_stats = cur.fetchone()
        
        waiting_now = len(context.bot_data.get('waiting_queue', []))
        sos_queue_len = len(context.bot_data.get('sos_queue', []))
        
        uptime = datetime.datetime.utcnow() - context.application.bot_data['start_time']
        d, r = divmod(int(uptime.total_seconds()), 86400)
        h, r = divmod(r, 3600)
        m, _ = divmod(r, 60)
        
        stats_text = (f"üìä **–ü–∞–¥—Ä–∞–±—è–∑–Ω–∞—è —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞**\n\n"
                      f"üë• **–ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫—ñ:**\n"
                      f"  - –£—Å—è–≥–æ –∑–∞—Ä—ç–≥—ñ—Å—Ç—Ä–∞–≤–∞–Ω–∞: `{user_stats['total_users']}`\n"
                      f"  - –ê–∫—Ç—ã—û–Ω—ã—Ö –∑–∞ 24–≥: `{user_stats['active_today']}`\n"
                      f"  - –ó–∞–±–ª—è–∫–∞–≤–∞–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞–º: `{user_stats['banned']}`\n"
                      f"  - –Ü–º–∞–≤–µ—Ä–Ω–∞, –∑–∞–±–ª–∞–∫–∞–≤–∞–ª—ñ –±–æ—Ç–∞: `{user_stats['blocked_bot']}`\n\n"
                      f"üó£Ô∏è **–ê–∫—Ç—ã—û–Ω–∞—Å—å—Ü—å:**\n"
                      f"  - –ó–∞—Ä–∞–∑ —É —á–∞—Ü–µ (–ø–∞—Ä—ã): `{user_stats['chatting'] // 2}`\n"
                      f"  - –ß–∞–∫–∞—é—Ü—å —Å—É—Ä–∞–∑–º–æ—û—Ü—É: `{waiting_now}`\n"
                      f"  - –£ —á–∞—Ä–∑–µ SOS: `{sos_queue_len}`\n\n"
                      f"üóÇ **–ì—ñ—Å—Ç–æ—Ä—ã—è:**\n"
                      f"  - –£—Å—è–≥–æ –ø—Ä–∞–≤–µ–¥–∑–µ–Ω–∞ –¥—ã—è–ª—ë–≥–∞—û: `{chat_stats['total_sessions']}`\n"
                      f"  - –£—Å—è–≥–æ –∞–¥–ø—Ä–∞—û–ª–µ–Ω–∞ –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω—è—û: `{chat_stats['total_messages']}`\n\n"
                      f"‚öôÔ∏è **–°—ã—Å—Ç—ç–º–∞:**\n"
                      f"  - Uptime: `{d}–¥ {h}–≥ {m}—Ö–≤`")
        await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞—Ç—Ä—ã–º–∞–Ω—å–Ω—ñ —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—ñ: {e}")
        await update.message.reply_text(f"‚ùå –ê–¥–±—ã–ª–∞—Å—è –ø–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞—Ç—Ä—ã–º–∞–Ω—å–Ω—ñ —Å—Ç–∞—Ç—ã—Å—Ç—ã–∫—ñ: {e}")

@check_if_banned
async def users_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    users_data = get_all_users()
    await update.message.reply_text(f"üë• –£—Å—è–≥–æ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞—û: {len(users_data)}", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–∞–∫–∞–∑–∞—Ü—å –ø–æ—û–Ω—ã —Å—å–ø—ñ—Å", callback_data='show_full_user_list')]]))

async def show_full_user_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    users_data = get_all_users()
    user_list = [f"‚Ä¢ `{get_user_display_name(uid, users_data)}` (@`{info.get('username', 'N/A')}`){' (–ó–ê–ë–ê–ù–ï–ù–´)' if info.get('is_banned') else ''}{' (–ó–ê–ë–õ–ê–ö–ê–í–ê–é –ë–û–¢–ê)' if info.get('has_blocked_bot') else ''} [–ü–∞–ø—è—Ä—ç–¥–∂–∞–Ω—å–Ω—ñ: {info.get('warnings', 0)}]\n  ID: `{uid}`" for uid, info in users_data.items()]
    full_text = f"üë• **–£—Å—è–≥–æ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞—û: {len(users_data)}**\n\n" + "\n\n".join(user_list)
    try: await query.edit_message_text(full_text, parse_mode=ParseMode.MARKDOWN)
    except BadRequest as e:
        if "Message is not modified" in str(e): return
        await query.edit_message_text(f"üë• **–£—Å—è–≥–æ:** {len(users_data)}\n\n–°—å–ø—ñ—Å –∑–∞–Ω–∞–¥—Ç–∞ –¥–æ—û–≥—ñ, –∞–¥–ø—Ä–∞—û–ª—è—é –ø–∞ —á–∞—Å—Ç–∫–∞—Ö:")
        for i in range(0, len(user_list), 50):
            await context.bot.send_message(query.message.chat_id, "\n\n".join(user_list[i:i+50]), parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(0.5)

async def get_user_info_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–≤—è–¥–∑—ñ—Ü–µ ID –∞–±–æ @username –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞. /cancel –¥–ª—è —Å–∫–∞—Å–∞–≤–∞–Ω—å–Ω—è.")
    return AWAITING_INFO_ID

async def get_user_info_receive(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id_to_get: str = None) -> int:
    is_callback = update.callback_query is not None
    if is_callback:
        await update.callback_query.answer()
        message = update.callback_query.message
        user_id_to_get = query.data.split('_')[-1]
    else:
        message = update.message
        user_id_found = find_user_id_by_identifier(message.text.strip())
        user_id_to_get = str(user_id_found) if user_id_found else None

    if user_id_to_get and (user_data := get_user(int(user_id_to_get))):
        reg_date = user_data.get('start_time').strftime('%Y-%m-%d %H:%M') if user_data.get('start_time') else 'N/A'
        last_active = user_data.get('last_active_time').strftime('%Y-%m-%d %H:%M') if user_data.get('last_active_time') else 'N/A'
        status_list = []
        if user_data.get('is_banned'): status_list.append('–ó–ê–ë–ê–ù–ï–ù–´ –ê–î–ú–Ü–ù–ê–ú')
        else: status_list.append('–ê–∫—Ç—ã—û–Ω—ã')
        if user_data.get('has_blocked_bot'): status_list.append('–ó–ê–ë–õ–ê–ö–ê–í–ê–é –ë–û–¢–ê')
        info_text = (f"üìÑ **–Ü–Ω—Ñ–∞—Ä–º–∞—Ü—ã—è –ø—Ä–∞ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞**\n**ID**: `{user_id_to_get}`\n**–Ü–º—è**: `{user_data.get('first_name', 'N/A')}`\n**Username**: @`{user_data.get('username', 'N/A')}`\n\n"
                     f"**–°—Ç–∞—Ç—É—Å**: `{', '.join(status_list)}`\n**–ü–∞–ø—è—Ä—ç–¥–∂–∞–Ω—å–Ω—ñ**: `{user_data.get('warnings', 0)}/{WARNING_LIMIT}`\n"
                     f"**–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞**: `{user_data.get('chat_status', 'N/A')}`\n\n"
                     f"**–ó–∞—Ä—ç–≥—ñ—Å—Ç—Ä–∞–≤–∞–Ω—ã**: `{reg_date} UTC`\n**–ê–ø–æ—à–Ω—è—è –∞–∫—Ç—ã—û–Ω–∞—Å—å—Ü—å**: `{last_active} UTC`")
        buttons = [[InlineKeyboardButton("üìú –ì—ñ—Å—Ç–æ—Ä—ã—è —á–∞—Ç–∞—û", callback_data=f"history_list_{user_id_to_get}")]]
        if user_data.get('is_banned'): buttons.append([InlineKeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω—ñ—Ü—å", callback_data=f"unban_{user_id_to_get}")])
        else: buttons.append([InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω—ñ—Ü—å", callback_data=f"ban_{user_id_to_get}")])
        reply_markup = InlineKeyboardMarkup(buttons)
        target_message = message.edit_text if is_callback else message.reply_text
        await target_message(info_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        await (message.edit_text if is_callback else message.reply_text)("‚ùå –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ –Ω—è –∑–Ω–æ–π–¥–∑–µ–Ω—ã.")

    if not is_callback:
        await admin_users_menu(update, context)
        return ConversationHandler.END
    return ConversationHandler.END

async def admin_ban_unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action, user_id_str = query.data.split('_')
    user_data = get_user(int(user_id_str))
    if user_data:
        user_data['is_banned'] = (action == 'ban')
        if action == 'unban': user_data['warnings'] = 0
        update_user(user_data)
        await get_user_info_receive(update, context, user_id_to_get=user_id_str)

async def admin_show_chat_partners(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id_str = query.data.split('_')[-1]
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT DISTINCT partner_id FROM chat_logs WHERE sender_id = %s
                UNION
                SELECT DISTINCT sender_id FROM chat_logs WHERE partner_id = %s
            """, (int(user_id_str), int(user_id_str)))
            partners = [p[0] for p in cur.fetchall()]
    
    if not partners:
        await query.edit_message_text(f"–£ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞ ID `{user_id_str}` –Ω—è–º–∞ –≥—ñ—Å—Ç–æ—Ä—ã—ñ —á–∞—Ç–∞—û.", parse_mode=ParseMode.MARKDOWN,
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("<< –ù–∞–∑–∞–¥ –¥–∞ —ñ–Ω—Ñ–æ", callback_data=f"back_to_user_info_{user_id_str}")]]))
        return
    
    users_db = get_all_users()
    buttons = [[InlineKeyboardButton(f"üí¨ {get_user_display_name(str(p), users_db)} (`{p}`)", callback_data=f"list_sessions_{user_id_str}_{p}")] for p in partners]
    buttons.append([InlineKeyboardButton("<< –ù–∞–∑–∞–¥ –¥–∞ —ñ–Ω—Ñ–æ", callback_data=f"back_to_user_info_{user_id_str}")])
    await query.edit_message_text(f"–í—ã–±–µ—Ä—ã—Ü–µ —Å—É—Ä–∞–∑–º–æ—û—Ü—É –¥–ª—è –ø—Ä–∞–≥–ª—è–¥—É –≥—ñ—Å—Ç–æ—Ä—ã—ñ (–∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ ID `{user_id_str}`):", reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)

async def admin_list_sessions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, _, user1_id, user2_id = query.data.split('_')
    with get_db_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT session_id, MIN(timestamp) as start_time FROM chat_logs
                WHERE (sender_id = %s AND partner_id = %s) OR (sender_id = %s AND partner_id = %s)
                GROUP BY session_id ORDER BY start_time DESC
            """, (int(user1_id), int(user2_id), int(user2_id), int(user1_id)))
            sessions = cur.fetchall()

    if not sessions:
        await query.edit_message_text("–ù—è –∑–Ω–æ–π–¥–∑–µ–Ω–∞ —Å—ç—Å—ñ—è—û –ø–∞–º—ñ–∂ –≥—ç—Ç—ã–º—ñ –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞–º—ñ.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("<< –ù–∞–∑–∞–¥ –¥–∞ –ø–∞—Ä—Ç–Ω—ç—Ä–∞—û", callback_data=f"history_list_{user1_id}")]]))
        return

    users_db = get_all_users()
    user2_name = get_user_display_name(user2_id, users_db)
    buttons = []
    for session_id, start_time_dt in sessions:
        start_time_formatted = start_time_dt.strftime('%Y-%m-%d %H:%M')
        buttons.append([InlineKeyboardButton(f"–°—ç—Å—ñ—è –∞–¥ {start_time_formatted}", callback_data=f"view_session_{session_id}")])

    buttons.append([InlineKeyboardButton("<< –ù–∞–∑–∞–¥ –¥–∞ –ø–∞—Ä—Ç–Ω—ç—Ä–∞—û", callback_data=f"history_list_{user1_id}")])
    await query.edit_message_text(f"–í—ã–±–µ—Ä—ã—Ü–µ —Å—ç—Å—ñ—é –∑ **{user2_name}** (`{user2_id}`):",
                                  reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)

async def admin_view_specific_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer("–ó–∞–≥—Ä—É–∂–∞—é –≥—ñ—Å—Ç–æ—Ä—ã—é...")
    session_id = query.data.removeprefix('view_session_')
    
    with get_db_connection() as conn:
        with conn.cursor(cursor_factory=DictCursor) as cur:
            cur.execute("SELECT * FROM chat_logs WHERE session_id = %s ORDER BY log_id ASC", (session_id,))
            chat_history = cur.fetchall()

    if not chat_history:
        await context.bot.send_message(ADMIN_CHAT_ID, f"–ü–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω—è—û —É –≥—ç—Ç–∞–π —Å—ç—Å—ñ—ñ –Ω—è–º–∞. (ID —Å—ç—Å—ñ—ñ: `{session_id}`)", parse_mode=ParseMode.MARKDOWN)
        return

    users_db = get_all_users()
    participant_ids = list(set([str(row['sender_id']) for row in chat_history] + [str(row['partner_id']) for row in chat_history]))
    participant_names = [f"`{get_user_display_name(uid, users_db)}` (`{uid}`)" for uid in participant_ids]
    start_time_formatted = chat_history[0]['timestamp'].strftime('%Y-%m-%d %H:%M')
    
    header_text = f"--- –ü–∞—á–∞—Ç–∞–∫ –ø–µ—Ä–∞–ø—ñ—Å–∫—ñ ({start_time_formatted}): {' —ñ '.join(participant_names)} ---"
    await context.bot.send_message(ADMIN_CHAT_ID, header_text, parse_mode=ParseMode.MARKDOWN)

    for row in chat_history:
        sender_name = get_user_display_name(str(row['sender_id']), users_db)
        sender_header = f"**`{sender_name}`**:"
        try:
            if row['message_type'] == 'text':
                await context.bot.send_message(ADMIN_CHAT_ID, f"{sender_header} {row['message_text']}", parse_mode=ParseMode.MARKDOWN)
            elif row['file_id']:
                caption = f"{sender_header}\n\n{row['message_text']}" if row['message_text'] else sender_header
                if len(caption) > 1024: caption = caption[:1021] + "..."
                kwargs = {'chat_id': ADMIN_CHAT_ID, 'caption': caption, 'parse_mode': ParseMode.MARKDOWN}
                
                msg_type = row['message_type']
                file_id = row['file_id']
                if msg_type == 'photo': await context.bot.send_photo(photo=file_id, **kwargs)
                elif msg_type == 'video': await context.bot.send_video(video=file_id, **kwargs)
                elif msg_type == 'voice': await context.bot.send_voice(voice=file_id, **kwargs)
                elif msg_type == 'document': await context.bot.send_document(document=file_id, **kwargs)
                elif msg_type == 'audio': await context.bot.send_audio(audio=file_id, **kwargs)
                elif msg_type == 'sticker':
                    await context.bot.send_message(ADMIN_CHAT_ID, sender_header, parse_mode=ParseMode.MARKDOWN)
                    await context.bot.send_sticker(ADMIN_CHAT_ID, file_id)
                elif msg_type == 'video_note':
                    await context.bot.send_message(ADMIN_CHAT_ID, sender_header, parse_mode=ParseMode.MARKDOWN)
                    await context.bot.send_video_note(ADMIN_CHAT_ID, file_id)
            await asyncio.sleep(0.3)
        except Exception as e:
            logger.error(f"–ù–µ–º–∞–≥—á—ã–º–∞ –∞–¥–ø—Ä–∞–≤—ñ—Ü—å –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ –∑ –≥—ñ—Å—Ç–æ—Ä—ã—ñ: {e}")
            await context.bot.send_message(ADMIN_CHAT_ID, f"{sender_header} [–ü–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ –Ω—è –º–æ–∂–∞ –±—ã—Ü—å –ø–∞–∫–∞–∑–∞–Ω–∞. –ü–∞–º—ã–ª–∫–∞: {e}]")

    await context.bot.send_message(ADMIN_CHAT_ID, "--- –ö–∞–Ω–µ—Ü –ø–µ—Ä–∞–ø—ñ—Å–∫—ñ ---")

# --- –õ–û–ì–ò–ö–ê –°–ö–ê–†–ì–ê–é ---

async def report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    reporter_id = str(query.from_user.id)
    reported_id = query.data.split('_')[1]
    buttons = [[InlineKeyboardButton("–¢–∞–∫, –ø–∞—Å–∫–∞—Ä–¥–∑—ñ—Ü—Ü–∞", callback_data=f"confirm_report_{reporter_id}_{reported_id}")],
               [InlineKeyboardButton("–ù–µ, —Å–∫–∞—Å–∞–≤–∞—Ü—å", callback_data="cancel_report")]]
    await query.answer()
    await query.edit_message_text("–í—ã —û–ø—ç—û–Ω–µ–Ω—ã—è, —à—Ç–æ —Ö–æ—á–∞—Ü–µ –ø–∞—Å–∫–∞—Ä–¥–∑—ñ—Ü—Ü–∞ –Ω–∞ –≥—ç—Ç–∞–≥–∞ —Å—É—Ä–∞–∑–º–æ—û—Ü—É?", reply_markup=InlineKeyboardMarkup(buttons))

async def confirm_report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    _, _, reporter_id, reported_id = query.data.split('_')
    context.user_data['report_data'] = {'reporter_id': reporter_id, 'reported_id': reported_id, 'screenshots': []}
    await query.edit_message_text("–ö–∞–ª—ñ –ª–∞—Å–∫–∞, –¥–∞—à–ª—ñ—Ü–µ –∞–¥–Ω–æ –∞–±–æ –Ω–µ–∫–∞–ª—å–∫—ñ —Ñ–æ—Ç–∞ (—Å–∫—Ä—ã–Ω—à–æ—Ç–∞—û) –∑—å –ø–µ—Ä–∞–ø—ñ—Å–∫—ñ, —è–∫—ñ—è –ø–∞—Ü—å–≤—è—Ä–¥–∂–∞—é—Ü—å –ø–∞—Ä—É—à—ç–Ω—å–Ω–µ.\n\n"
                                  "–ü–∞—Å—å–ª—è —Ç–∞–≥–æ, —è–∫ –¥–∞—à–ª–µ—Ü–µ —û—Å–µ —Ñ–∞–π–ª—ã, –Ω–∞—Ü—ñ—Å—å–Ω—ñ—Ü–µ –∫–Ω–æ–ø–∫—É **'–ì–∞—Ç–æ–≤–∞'**.",
                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ì–∞—Ç–æ–≤–∞", callback_data="finish_report")]]))
    return AWAITING_REPORT_SCREENSHOTS

async def receive_report_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.photo:
        await update.message.reply_text("–ö–∞–ª—ñ –ª–∞—Å–∫–∞, –¥–∞—Å—ã–ª–∞–π—Ü–µ —Ç–æ–ª—å–∫—ñ —Ñ–æ—Ç–∞ (—Å–∫—Ä—ã–Ω—à–æ—Ç—ã).")
        return
    photo_id = update.message.photo[-1].file_id
    context.user_data.get('report_data', {}).get('screenshots', []).append(photo_id)
    await update.message.reply_text("–°–∫—Ä—ã–Ω—à–æ—Ç –ø—Ä—ã–Ω—è—Ç—ã. –î–∞—à–ª—ñ—Ü–µ —è—à—á—ç –∞–±–æ –Ω–∞—Ü—ñ—Å—å–Ω—ñ—Ü–µ '–ì–∞—Ç–æ–≤–∞'.")

async def finish_report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    report_data = context.user_data.get('report_data', {})
    reporter_id = report_data.get('reporter_id')
    reported_id = report_data.get('reported_id')
    screenshots = report_data.get('screenshots', [])
    if not (reporter_id and reported_id and screenshots):
        await query.edit_message_text("‚ùå –ü–∞–º—ã–ª–∫–∞. –°–∫–∞—Ä–≥–∞ –Ω—è –±—É–¥–∑–µ –∞–¥–ø—Ä–∞—û–ª–µ–Ω–∞—è. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ –∑–Ω–æ—û.")
        context.user_data.pop('report_data', None)
        return ConversationHandler.END
    
    users_db = get_all_users()
    reporter_name = get_user_display_name(reporter_id, users_db)
    reported_name = get_user_display_name(reported_id, users_db)
    report_text = (f"‚ùóÔ∏è **–ù–æ–≤–∞—è —Å–∫–∞—Ä–≥–∞!**\n\n"
                   f"**–ê–¥:** `{reporter_name}` (ID: `{reporter_id}`)\n"
                   f"**–ù–∞:** `{reported_name}` (ID: `{reported_id}`)\n\n"
                   f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä, –ø—Ä–∞–≤–µ—Ä—Ü–µ –ø—Ä—ã–∫–ª–∞–¥–∑–µ–Ω—ã—è –¥–æ–∫–∞–∑—ã.")
    await context.bot.send_message(ADMIN_CHAT_ID, report_text, parse_mode=ParseMode.MARKDOWN)
    media_group = [InputMediaPhoto(media=ss) for ss in screenshots]
    if media_group:
        await context.bot.send_media_group(ADMIN_CHAT_ID, media=media_group)
    await query.edit_message_text("‚úÖ –î–∑—è–∫—É–π! –í–∞—à–∞—è —Å–∫–∞—Ä–≥–∞ –∞–¥–ø—Ä–∞—û–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä—É.")
    context.user_data.pop('report_data', None)
    return ConversationHandler.END

async def cancel_report_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ê–¥–ø—Ä–∞—û–∫–∞ —Å–∫–∞—Ä–≥—ñ —Å–∫–∞—Å–∞–≤–∞–Ω–∞—è.")
    if 'report_data' in context.user_data: context.user_data.pop('report_data')
    return ConversationHandler.END

# --- –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∑–µ—è–Ω—å–Ω–µ —Å–∫–∞—Å–∞–≤–∞–Ω–∞–µ.", reply_markup=ADMIN_MAIN_MENU_KEYBOARD)
    return ConversationHandler.END

async def sendall_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–≤—è–¥–∑—ñ—Ü–µ –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫—ñ —û—Å—ñ–º. /cancel –¥–ª—è —Å–∫–∞—Å–∞–≤–∞–Ω—å–Ω—è.")
    return AWAITING_BROADCAST_MESSAGE

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    sent, failed = 0, 0
    users_to_send = get_all_users()
    await update.message.reply_text(f"–ü–∞—á—ã–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users_to_send)} –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞—û...")
    for user_id_str in users_to_send.keys():
        try:
            await update.message.copy(chat_id=user_id_str)
            sent += 1
            await asyncio.sleep(0.05)
        except Forbidden:
            mark_user_as_bot_blocker(user_id_str)
            failed += 1
        except Exception as e:
            logger.error(f"–ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è –∞–¥–ø—Ä–∞–≤—ñ—Ü—å –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ {user_id_str} –ø–∞–¥—á–∞—Å —Ä–∞—Å—Å—ã–ª–∫—ñ: {e}")
            failed += 1
    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∞–Ω–∞—è!\nüëç –ê–¥–ø—Ä–∞—û–ª–µ–Ω–∞: {sent}\nüëé –ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è: {failed}", reply_markup=ADMIN_BROADCAST_MENU_KEYBOARD)
    return ConversationHandler.END

async def sendto_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–£–≤—è–¥–∑—ñ—Ü–µ ID –∞–±–æ @username –∞—Ç—Ä—ã–º–∞–ª—å–Ω—ñ–∫–∞—û –ø—Ä–∞–∑ –∫–æ—Å–∫—É. /cancel –¥–ª—è —Å–∫–∞—Å–∞–≤–∞–Ω—å–Ω—è")
    return AWAITING_SENDTO_IDS

async def sendto_receive_ids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    found_ids = {find_user_id_by_identifier(r.strip()) for r in update.message.text.split(',') if find_user_id_by_identifier(r.strip())}
    if not found_ids:
        await update.message.reply_text("‚ö†Ô∏è –ù—è –∑–Ω–æ–π–¥–∑–µ–Ω—ã –Ω—ñ–≤–æ–¥–∑—ñ–Ω –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫. –ü–∞—Å–ø—Ä–∞–±—É–π—Ü–µ —è—à—á—ç —Ä–∞–∑. /cancel –¥–ª—è —Å–∫–∞—Å–∞–≤–∞–Ω—å–Ω—è")
        return AWAITING_SENDTO_IDS
    context.user_data['sendto_ids'] = list(found_ids)
    await update.message.reply_text(f"‚úÖ –ó–Ω–æ–π–¥–∑–µ–Ω–∞: {len(found_ids)}. –£–≤—è–¥–∑—ñ—Ü–µ –ø–∞–≤–µ–¥–∞–º–ª–µ–Ω—å–Ω–µ:")
    return AWAITING_SENDTO_MESSAGE

async def sendto_receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    sent, failed = 0, 0
    for user_id in context.user_data.get('sendto_ids', []):
        try:
            await update.message.copy(chat_id=user_id)
            sent += 1
            await asyncio.sleep(0.05)
        except Forbidden:
            mark_user_as_bot_blocker(str(user_id))
            failed += 1
        except Exception: failed += 1
    await update.message.reply_text(f"üéØ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∞–Ω–∞—è:\nüëç –ê–¥–ø—Ä–∞—û–ª–µ–Ω–∞: {sent}\nüëé –ù–µ –∞—Ç—Ä—ã–º–∞–ª–∞—Å—è: {failed}", reply_markup=ADMIN_BROADCAST_MENU_KEYBOARD)
    context.user_data.pop('sendto_ids', None)
    return ConversationHandler.END

@check_if_banned
async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_data.get('chat_status') != CHAT_STATUS_IDLE:
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–∞—Ü–µ –∑—å–≤—è–∑–∞—Ü—Ü–∞ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞–º, –ø–∞–∫—É–ª—å –∑–Ω–∞—Ö–æ–¥–∑—ñ—Ü–µ—Å—è —û —á–∞—Ü–µ. –°–ø–∞—á–∞—Ç–∫—É –≤—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ /stop.")
        return
    sos_queue = context.bot_data.setdefault('sos_queue', [])
    if user_id in sos_queue:
        await update.message.reply_text("–í–∞—à –∑–∞–ø—ã—Ç —É–∂–æ —û —á–∞—Ä–∑–µ. –ö–∞–ª—ñ –ª–∞—Å–∫–∞, —á–∞–∫–∞–π—Ü–µ.")
        return
    sos_queue.append(user_id)
    users_db = get_all_users()
    user_display_name = get_user_display_name(str(user_id), users_db)
    await update.message.reply_text("–í–∞—à –∑–∞–ø—ã—Ç –¥–∞–¥–∞–¥–∑–µ–Ω—ã —û —á–∞—Ä–≥—É. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä —Ö—É—Ç–∫–∞ –∑ –≤–∞–º—ñ –∑—å–≤—è–∂–∞—Ü—Ü–∞.")
    try:
        await context.bot.send_message(ADMIN_CHAT_ID,
            f"‚ùóÔ∏è –ù–æ–≤—ã –∑–∞–ø—ã—Ç —É —á–∞—Ä–∑–µ SOS –∞–¥ **{user_display_name}** (`{user_id}`).\n"
            f"–£—Å—è–≥–æ —û —á–∞—Ä–∑–µ: **{len(sos_queue)}**.\n\n"
            f"–ù–∞—Ü—ñ—Å—å–Ω—ñ—Ü–µ 'üÜò SOS-—á–∞—Ç—ã', –∫–∞–± –ø–∞—á–∞—Ü—å.", parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–ù–µ–º–∞–≥—á—ã–º–∞ –∞–¥–ø—Ä–∞–≤—ñ—Ü—å SOS –∞–ø–∞–≤—è—à—á—ç–Ω—å–Ω–µ –∞–¥–º—ñ–Ω—É: {e}")

@check_if_banned
async def admin_sos_chat_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    sos_queue = context.bot_data.setdefault('sos_queue', [])
    if not sos_queue:
        await update.message.reply_text("–ß–∞—Ä–≥–∞ SOS-–∑–∞–ø—ã—Ç–∞—û –ø—É—Å—Ç–∞—è.", reply_markup=ADMIN_MAIN_MENU_KEYBOARD)
        return
    user_id_to_connect = sos_queue.pop(0)
    user_to_connect_data = get_user(user_id_to_connect)
    if not user_to_connect_data or user_to_connect_data.get('chat_status') != CHAT_STATUS_IDLE:
        await update.message.reply_text(f"‚ùå –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ {user_id_to_connect} —É–∂–æ –∑–∞–Ω—è—Ç—ã. –®—É–∫–∞—é –Ω–∞—Å—Ç—É–ø–Ω–∞–≥–∞...")
        await admin_sos_chat_start(update, context)
        return
    
    admin_data = get_user(admin_id)
    if admin_data.get('chat_status') == CHAT_STATUS_CHATTING:
        admin_partner_id = admin_data.get('current_chat_partner')
        await end_chat_session(str(admin_id), str(admin_partner_id) if admin_partner_id else None, context, initiator_id_str=str(admin_id))
        await asyncio.sleep(0.5)
    
    users_db = get_all_users()
    user_display_name = get_user_display_name(str(user_id_to_connect), users_db)
    await update.message.reply_text(f"‚è≥ –ü–∞–¥–∫–ª—é—á–∞—é –≤–∞—Å –¥–∞ {user_display_name} (`{user_id_to_connect}`)...")
    try:
        await context.bot.send_message(user_id_to_connect, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä –ø–∞–¥–∫–ª—é—á–∞–µ—Ü—Ü–∞ –¥–∞ –≤–∞—Å...")
    except Exception as e:
        logger.error(f"–ù–µ–º–∞–≥—á—ã–º–∞ –∞–ø–∞–≤—è—Å—å—Ü—ñ—Ü—å {user_id_to_connect} –ø—Ä–∞ –ø–∞–¥–∫–ª—é—á—ç–Ω—å–Ω–µ –∞–¥–º—ñ–Ω–∞: {e}")
    await connect_users(str(admin_id), str(user_id_to_connect), context)

async def handle_amnesty_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_data = get_user(user_id)
    if user_data and user_data.get('is_banned'):
        user_data['is_banned'] = False
        user_data['warnings'] = 0
        update_user(user_data)
        await update.message.reply_text("‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –∞–¥–Ω–æ—û–ª–µ–Ω—ã. –ö–∞–ª—ñ –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–ª–µ–π –∫–∞—Ä—ã—Å—Ç–∞–π—Ü–µ—Å—è –≤—ã–∫–ª—é—á–Ω–∞ –ª—ñ—Ç–∞—Ä–∞–º—ñ –±–µ–ª–∞—Ä—É—Å–∫–∞–≥–∞ –∞–ª—å—Ñ–∞–±—ç—Ç—É.", reply_markup=ReplyKeyboardRemove())
        logger.info(f"–ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫ {user_id} –≤—ã–∫–∞—Ä—ã—Å—Ç–∞—û –∫–æ–¥ –∞–º–Ω—ñ—Å—Ç—ã—ñ —ñ –±—ã—û —Ä–∞–∑–±–∞–Ω–µ–Ω—ã.")

async def clear_chat_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    buttons = [[InlineKeyboardButton("–¢–∞–∫, —è —û–ø—ç—û–Ω–µ–Ω—ã, –≤—ã–¥–∞–ª—ñ—Ü—å —É—Å—ë", callback_data="confirm_clear_history")],
               [InlineKeyboardButton("–ù–µ, —Å–∫–∞—Å–∞–≤–∞—Ü—å", callback_data="cancel_clear_history")]]
    await update.message.reply_text("üóëÔ∏è **–ü–∞–ø—è—Ä—ç–¥–∂–∞–Ω—å–Ω–µ!**\n\n–í—ã –∑—å–±—ñ—Ä–∞–µ—Ü–µ—Å—è **–ë–ï–°–ü–ê–í–ê–†–û–¢–ù–ê –í–´–î–ê–õ–Ü–¶–¨** —É—Å—é –≥—ñ—Å—Ç–æ—Ä—ã—é –ø–µ—Ä–∞–ø—ñ—Å–∞–∫ —É—Å—ñ—Ö –∫–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫–∞—û.\n\n"
                                    "–ì—ç—Ç–∞–µ –¥–∑–µ—è–Ω—å–Ω–µ –Ω–µ–ª—å–≥–∞ —Å–∫–∞—Å–∞–≤–∞—Ü—å. –í—ã —û–ø—ç—û–Ω–µ–Ω—ã—è?",
                                    reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)

async def confirm_clear_history_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer("–ê—á—ã—à—á–∞—é –≥—ñ—Å—Ç–æ—Ä—ã—é...")
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("TRUNCATE TABLE chat_logs, message_links;")
        logger.warning("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä –∞—á—ã—Å—å—Ü—ñ—û —É—Å—é –≥—ñ—Å—Ç–æ—Ä—ã—é —á–∞—Ç–∞—û.")
        await query.edit_message_text("‚úÖ –£—Å—è –≥—ñ—Å—Ç–æ—Ä—ã—è –ø–µ—Ä–∞–ø—ñ—Å–∞–∫ –ø–∞—Å—å–ø—è—Ö–æ–≤–∞ –≤—ã–¥–∞–ª–µ–Ω–∞—è.")
    except Exception as e:
        logger.error(f"–ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞—á—ã—Å—Ç—Ü—ã –≥—ñ—Å—Ç–æ—Ä—ã—ñ: {e}")
        await query.edit_message_text(f"‚ùå –ê–¥–±—ã–ª–∞—Å—è –ø–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞—á—ã—Å—Ç—Ü—ã –≥—ñ—Å—Ç–æ—Ä—ã—ñ: {e}")

async def cancel_clear_history_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ê—á—ã—Å—Ç–∫–∞ –≥—ñ—Å—Ç–æ—Ä—ã—ñ —Å–∫–∞—Å–∞–≤–∞–Ω–∞—è.")

async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("search", "üîé –ü–∞—á–∞—Ü—å/–Ω–∞—Å—Ç—É–ø–Ω—ã –∞–Ω–∞–Ω—ñ–º–Ω—ã —á–∞—Ç"),
        BotCommand("stop", "‚èπÔ∏è –°–ø—ã–Ω—ñ—Ü—å –±—è–≥—É—á—ã –¥—ã—è–ª—ë–≥"),
        BotCommand("sos", "üÜò –ó—å–≤—è–∑–∞—Ü—Ü–∞ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∞—Ä–∞–º"),
        BotCommand("rules", "üìú –ü—Ä–∞–≤—ñ–ª—ã —á–∞—Ç—É"),
    ])

def main() -> None:
    initialize_databases()
    reset_all_user_statuses_on_startup()

    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    application.bot_data['start_time'] = datetime.datetime.utcnow()
    application.bot_data['sos_queue'] = []
    application.bot_data['waiting_queue'] = []
    application.bot_data['chat_search_lock'] = asyncio.Lock()

    admin_filter = filters.User(user_id=int(ADMIN_CHAT_ID))
    conv_fallbacks = [CommandHandler("cancel", cancel, filters=admin_filter)]

    report_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(confirm_report_callback, pattern=r'^confirm_report_')],
        states={
            AWAITING_REPORT_SCREENSHOTS: [
                MessageHandler(filters.PHOTO, receive_report_screenshot),
                CallbackQueryHandler(finish_report_callback, pattern=r'^finish_report$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_report_callback, pattern=r'^cancel_report$')],
        per_message=False
    )
    application.add_handler(report_handler)

    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üì£ –£—Å—ñ–º$') & admin_filter, sendall_start)],
        states={AWAITING_BROADCAST_MESSAGE: [MessageHandler(filters.ALL & ~filters.COMMAND, broadcast_message)]},
        fallbacks=conv_fallbacks))
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üéØ –í—ã–±—Ä–∞–Ω—ã–º$') & admin_filter, sendto_start)],
        states={
            AWAITING_SENDTO_IDS: [MessageHandler(filters.TEXT & ~filters.COMMAND, sendto_receive_ids)],
            AWAITING_SENDTO_MESSAGE: [MessageHandler(filters.ALL & ~filters.COMMAND, sendto_receive_message)]
        },
        fallbacks=conv_fallbacks))
    application.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ÑπÔ∏è –Ü–Ω—Ñ–æ –ø—Ä–∞ —é–∑—ç—Ä–∞$') & admin_filter, get_user_info_start)],
        states={AWAITING_INFO_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_info_receive)]},
        fallbacks=conv_fallbacks))

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rules", rules_command))
    application.add_handler(CommandHandler("sos", contact_admin))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("stop", stop_command))
    application.add_handler(CommandHandler("help", help_command, filters=admin_filter))

    application.add_handler(MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç—ã—Å—Ç—ã–∫–∞$') & admin_filter, stats))
    application.add_handler(MessageHandler(filters.Regex('^üë• –ö–∞—Ä—ã—Å—Ç–∞–ª—å–Ω—ñ–∫—ñ$') & admin_filter, admin_users_menu))
    application.add_handler(MessageHandler(filters.Regex('^üì£ –†–∞—Å—Å—ã–ª–∫—ñ$') & admin_filter, admin_broadcast_menu))
    application.add_handler(MessageHandler(filters.Regex('^‚öôÔ∏è –°—ã—Å—Ç—ç–º–∞$') & admin_filter, admin_system_menu))
    application.add_handler(MessageHandler(filters.Regex('^üîô –ì–∞–ª–æ—û–Ω–∞–µ –º—ç–Ω—é$') & admin_filter, admin_main_menu))
    application.add_handler(MessageHandler(filters.Regex('^üìã –°—å–ø—ñ—Å —É—Å—ñ—Ö$') & admin_filter, users_list))
    application.add_handler(MessageHandler(filters.Regex('^üÜò SOS-—á–∞—Ç—ã$') & admin_filter, admin_sos_chat_start))
    application.add_handler(MessageHandler(filters.Regex('^üóëÔ∏è –ê—á—ã—Å—å—Ü—ñ—Ü—å –≥—ñ—Å—Ç–æ—Ä—ã—é —á–∞—Ç–∞—û$') & admin_filter, clear_chat_history))
    application.add_handler(MessageHandler(filters.Regex('^üí¨ –í—ã–ø–∞–¥–∫–æ–≤—ã —á–∞—Ç$') & admin_filter, admin_enter_random_chat))

    application.add_handler(CallbackQueryHandler(show_full_user_list_callback, pattern='^show_full_user_list$'))
    application.add_handler(CallbackQueryHandler(admin_show_chat_partners, pattern=r'^history_list_'))
    application.add_handler(CallbackQueryHandler(get_user_info_receive, pattern=r'^back_to_user_info_'))
    application.add_handler(CallbackQueryHandler(admin_list_sessions, pattern=r'^list_sessions_'))
    application.add_handler(CallbackQueryHandler(admin_view_specific_chat, pattern=r'^view_session_'))
    application.add_handler(CallbackQueryHandler(admin_ban_unban_user, pattern=r'^(un)?ban_'))
    application.add_handler(CallbackQueryHandler(report_callback, pattern=r'^report_'))
    application.add_handler(CallbackQueryHandler(cancel_report_callback, pattern=r'^cancel_report$'))
    application.add_handler(CallbackQueryHandler(confirm_clear_history_callback, pattern=r'^confirm_clear_history$'))
    application.add_handler(CallbackQueryHandler(cancel_clear_history_callback, pattern=r'^cancel_clear_history$'))

    application.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE & filters.ChatType.PRIVATE & ~filters.COMMAND, edited_message_handler), group=1)
    application.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, chat_message_handler), group=1)

    print("–ë–æ—Ç –ø–∞—Å—å–ø—è—Ö–æ–≤–∞ –∑–∞–ø—É—à—á–∞–Ω—ã...")
    application.run_polling()

if __name__ == "__main__":
    main()